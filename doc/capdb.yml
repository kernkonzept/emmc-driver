name: eMMC driver
binary-name: emmc-drv
anchor: l4re_servers_emmc_driver
desc: |
  The eMMC driver is a driver for PCI Express eMMC controllers.

  ## Starting the service

  The eMMC driver can be started with Lua like this:

  ```lua
  local emmc_bus = L4.default_loader:new_channel();
  L4.default_loader:start({
    caps = {
      vbus = vbus_emmc,
      svr = emmc_bus:svr(),
    },
  }, "rom/emmc-drv");
  ```

  First, an IPC gate (`emmc_bus`) is created which is used between the eMMC
  driver and a client to request access to a particular disk or partition. The
  server side is assigned to the mandatory `svr` capability of the eMMC driver.
  See the section below on how to configure access to a disk or partition.

  The eMMC driver needs access to a virtual bus capability (`vbus`). On the
  virtual bus the eMMC driver searches for eMMC compliant storage controllers.
  Please see io's documentation about how to setup a virtual bus.

  ### Supported devices

  The eMMC driver supports SDHCI and SDHI controllers, in particular
  - SDHI interfaces found on RCar3 r8a7795 boards
  - SDHCI interfaces found on RPI4
  - uSDHCI interfaces found on i.MX8 boards
  - uSDHCI interfaces found on the S32G SoC
  - the QEMU SD card emulation (SDHCI, see `doc/pcie-ecam.io`),
  - the QEMU eMMC emulation (provided by extending the QEMU SD card emulation by
    `doc/qemu-patch.diff`).

text-before-cmds: |
  In the example above the eMMC driver is started in its default configuration.
  To customize the configuration of the eMMC driver it accepts the following
  command line options:
cmds:
  - name: 'verbose'
    short: 'v'
    desc: |
      Enable verbose mode. You can repeat this option to increase
      verbosity up to trace level.
    type: flag
    multiple: true
    max: 3
  - name: 'quiet'
    short: 'q'
    desc: This option enables the quiet mode. All output is silenced.
    type: flag
  - name: 'disable-mode'
    metavar: 'mode'
    desc: |
      This option allows to disable certain eMMC/SD card modes from
      autodetection. Modes with the `hs`-prefix are determined for eMMC
      devices, others are for SD card devices.
    type: selection
    options: ['hs26', 'hs52', 'hs52_ddr', 'hs200', 'hs400',
              'sdr12', 'sdr25', 'sdr50', 'sdr104', 'ddr50']
    multiple: true
  - name: 'max-seg'
    metavar: 'max'
    desc: |
      Maximum number of segments per request. This number is announced to the
      virtio interface and is also relevant for the required bounce buffer
      size, see below.
    type: int
    default: 64
  - name: 'client'
    type: scope
    sub-cmds:
      - name: 'client'
        metavar: 'cap_name'
        desc: Connect a static client.
        type: cap
        cap-name: 'client'
        protocol: 'ipc'
        multiple: true
        needs-server-right: true
      - name: 'device'
        metavar: 'UUID'
        desc: |
          This option denotes the partition UUID of the partition to be
          exported for the client specified in the preceding `client` option.
        type: str
        mandatory: true
      - name: 'ds-max'
        metavar: 'max'
        desc: |
          This option sets the upper limit of the number of dataspaces the
          client is able to register with the eMMC driver for virtio DMA.
        type: int
        default: 2
      - name: 'readonly'
        desc: |
          This option sets the access to disks or partitions to read only for
          the preceding `client` option.
        type: flag
      - name: 'dma-map-all'
        desc: |
          Map the entire client dataspace into the DMA space at the first I/O
          request and never unmap the dataspace until the client is destroyed.
          The default behavior is to map the relevant part of the dataspace
          before an I/O request and unmap it after the request.
        type: flag
caps:
  - name: 'vbus'
    desc: |
      Required for finding the device which should be driven by this driver.
    protocol: 'ipc'
    mandatory: true
  - name: 'client'
    desc: Static client
    protocol: 'ipc'
    needs-server-right: true
    multiple: true
    provided-by-cmd: 'client'
  - name: 'bbds'
    desc: |
      **Only used by the SDHCI driver.**
      Certain SDHCI devices cannot handle DMA requests with DMA buffers
      beyond 4GiB. The provided dataspace is used as bounce buffer if the
      driver detects that a certain request needs it.
      **Note:** The bounce buffer needs to be able to hold the memory for an
      entire read/write request. That means that the buffer is divided into
      the number of maximum segments (see `--max-seg` parameter).
    protocol: 'dataspace'
  - name: 'sdhci_adma_buf'
    desc: |
      **Only used by the SDHCI driver.**
      Page (4096 bytes) for storing DMA descriptors for the SDHCI driver.
      If this capability is not provided, the driver will allocate an arbitrary
      page.
    protocol: 'dataspace'
  - name: 'bcm2835_mbox_mem'
    desc: |
      **Only used by the SDHCI driver when attaching to an bcm2711-compatible
      device.**
      Page (4096 bytes) for storing bcm2835 mbox messages. The firmware mbox
      is used to perform voltage switching for certain SD card configurations.
      If this capability is not provided, the driver will allocate an
      arbitrary page.
    protocol: 'dataspace'
server-cap-name: svr
factory:
  - obj-type: '0'
    return-type: Virtio_block_host
    name: Virtio block host
    desc: |
      Prior to connecting a client to a virtual block session it has to be
      created using the following Lua function. It has to be called on the
      client side of the IPC gate capability whose server side is bound to
      the eMMC driver.
    post-desc: |
      If the `create()` call is successful, a new capability which references
      an eMMC virtio driver is returned. A client uses this capability to
      communicate with the eMMC driver using the Virtio block protocol.
    params:
      - name: 'device'
        metavar: 'UUID'
        desc: |
          This string denotes a partition UUID the client wants to be exported
          via the Virtio block interface.
        type: str
        mandatory: true
      - name: 'ds-max'
        metavar: 'max'
        desc: |
          Specifies the upper limit of the number of dataspaces the client is
          allowed to register with the eMMC driver for virtio DMA.
        type: int
        default: 2
        conditions:
          - desc: Must be in the range of 1 to 256 inclusive.
            conditions:
              - 1 <= v
              - v <= 256
      - name: 'readonly'
        desc: |
          This option sets the access to disks or partitions to read only for
          this client connection.
        type: flag
      - name: 'dma-map-all'
        desc: |
          Map the entire client dataspace into the DMA space at the first I/O
          request and never unmap the dataspace until the client is destroyed.
          The default behavior is to map the relevant part of the dataspace
          before an I/O request and unmap it after the request.
        type: flag
examples: |
  A couple of examples on how to request different disks or partitions are
  listed below.

  * Request a partition with the given UUID

  ```lua
  vda1 = emmc_bus:create(0, "ds-max=5", "device=AFFA05B0-9379-480E-B9C6-5FF57FB1D194")
  ```

  * A more elaborate example with a static client. The client uses the client
    side of the `emmc_cl1` capability to communicate with the eMMC driver.

    ```lua
    local emmc_cl1 = L4.default_loader:new_channel();
    local emmc_bus = L4.default_loader:new_channel();
    L4.default_loader:start({
      caps = {
        vbus = vbus_emmc,
        svr = emmc_bus:svr(),
        cl1 = emmc_cl1:svr(),
      },
    }, "rom/emmc-drv --client cl1 --device 88E59675-4DC8-469A-98E4-B7B021DC7FBE --ds-max 5");
    ```

  * Accessing a device from QEMU:

    The file `pcie-ecam.io` contains an IO config file which is able to use the
    QEMU PCI controller to search for attached eMMC devices.

  * eMMC emulation with QEMU:

    The attached patch extends QEMU SD card emulation to emulate eMMC devices.
    After applying the patch and recompiling QEMU, attach the following
    parameters to your QEMU command line (assuming that `$HOME/foobar.img`
    is the eMMC medium):

    ```bash
    -drive id=sd_disk,file=$(HOME)/foobar.img,if=none,format=raw \
    -device sdhci-pci,id=sdhci \
    -device sd-card,drive=sd_disk,spec_version=3,emmc=on
    ```
